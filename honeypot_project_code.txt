└─$ cat Logger.cpp         
#include "Logger.hpp"
#include <iostream>
#include <ctime>

Logger::Logger() {
    log_file.open("ssh_honeypot.log", std::ios::app);
}

void Logger::log(const std::string& message) {
    std::time_t now = std::time(0);
    std::string time_str = std::ctime(&now);
    time_str.pop_back(); // Remove newline character
    log_file << "[" << time_str << "] " << message << std::endl;
}
----------------------------------------------------
└─$ cat Logger.hpp
#ifndef LOGGER_HPP
#define LOGGER_HPP

#include <string>
#include <fstream>

class Logger {
public:
    static Logger& getInstance() {
        static Logger instance;
        return instance;
    }

    void log(const std::string& message);

private:
    Logger();
    std::ofstream log_file;
};

#endif // LOGGER_HPP
---------------------------------------
┌──(maangalya㉿kali)-[~/ssh_honeypot/src]
└─$ cat Server.cpp
#include "Server.hpp"
#include "Shell.hpp"
#include "Logger.hpp"
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <iostream>

Server::Server(int port) : port(port) {}

void Server::start() {
    Logger::getInstance().log("Listening on port " + std::to_string(port) + "...");

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        Logger::getInstance().log("Error creating socket.");
        return;
    }

    sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        Logger::getInstance().log("Error binding to port.");
        return;
    }

    if (listen(server_socket, 3) == -1) {
        Logger::getInstance().log("Error listening on socket.");
        return;
    }

    Logger::getInstance().log("Server is now listening...");

    while (true) {
        int client_socket = accept(server_socket, NULL, NULL);
        if (client_socket != -1) {
            Logger::getInstance().log("Handling new client...");
            handleClient(client_socket);
        }
    }
}

void Server::handleClient(int client_socket) {
    Shell shell;
    shell.run(client_socket);
    close(client_socket);
}
-------------------------------------------------------------
└─$ cat Server.hpp
#ifndef SERVER_HPP
#define SERVER_HPP

class Server {
public:
    Server(int port);
    void start();
private:
    int server_socket;
    int port;
    void handleClient(int client_socket);
};

#endif // SERVER_HPP
-------------------------------------------------------
└─$ cat Shell.cpp 
#include "Shell.hpp"
#include "Logger.hpp"
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <chrono>
#include <thread>

void blockIP(const std::string &client_ip) {
    // Block the IP using iptables with sudo
    std::string block_command = "sudo iptables -A INPUT -s " + client_ip + " -j DROP";
    system(block_command.c_str());

    // Wait for 1 minute
    std::this_thread::sleep_for(std::chrono::minutes(1));

    // Unblock the IP after 1 minute
    std::string unblock_command = "sudo iptables -D INPUT -s " + client_ip + " -j DROP";
    system(unblock_command.c_str());
}


std::string getClientIP(int client_socket) {
    struct sockaddr_in addr;
    socklen_t addr_size = sizeof(struct sockaddr_in);
    getpeername(client_socket, (struct sockaddr *)&addr, &addr_size);
    char *client_ip = inet_ntoa(addr.sin_addr);
    return std::string(client_ip);
}

void Shell::run(int client_socket) {
    const char* login_prompt = "login: ";
    send(client_socket, login_prompt, strlen(login_prompt), 0);

    char login_buffer[1024];
    int login_bytes_read = recv(client_socket, login_buffer, sizeof(login_buffer) - 1, 0);
    login_buffer[login_bytes_read] = '\0';

    const char* password_prompt = "Password: ";
    send(client_socket, password_prompt, strlen(password_prompt), 0);

    char password_buffer[1024];
    int password_bytes_read = recv(client_socket, password_buffer, sizeof(password_buffer) - 1, 0);
    password_buffer[password_bytes_read] = '\0';

    const char* welcome_msg = "Welcome to SSH honeypot\n";
    send(client_socket, welcome_msg, strlen(welcome_msg), 0);

    const char* prompt = "user@honeypot:~$ ";
    send(client_socket, prompt, strlen(prompt), 0);

    Logger::getInstance().log("New session started");

    char buffer[1024];
    int bytes_read;
    std::string client_ip = getClientIP(client_socket);

    while ((bytes_read = recv(client_socket, buffer, sizeof(buffer) - 1, 0)) > 0) {
        buffer[bytes_read] = '\0';

        // Trim newline and carriage return characters
        size_t length = strlen(buffer);
        while (length > 0 && (buffer[length - 1] == '\n' || buffer[length - 1] == '\r')) {
            buffer[--length] = '\0';
        }

        Logger::getInstance().log("Received command: '" + std::string(buffer) + "'");

        if (strcmp(buffer, "ls") == 0) {
            const char* ls_output = "authorized_keys.txt finance_database.db file2.txt  directory1\n";
            send(client_socket, ls_output, strlen(ls_output), 0);
        } else if (strcmp(buffer, "whoami") == 0) {
            const char* whoami_output = "user\n";
            send(client_socket, whoami_output, strlen(whoami_output), 0);
        } else if (strcmp(buffer, "pwd") == 0) {
            const char* pwd_output = "/home/user\n";
            send(client_socket, pwd_output, strlen(pwd_output), 0);
        } else if (strcmp(buffer, "cat authorized_keys.txt") == 0) {
            const char* authorized_keys_txt_output = "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArv07saB1XmJcFGziAbhuyUn4cS3ldxOtOW5BxjCn7O4RRdqjoa5OjF8n4h3U7B6Kd7lB3qfP5EVw2xLgyc1Vx7YoEVJSgqPwT0rdUOpCPL0RU2ghQ9skEfs";
            send(client_socket, authorized_keys_txt_output, strlen(authorized_keys_txt_output), 0);

            // Block the client's IP for 1 minute
            Logger::getInstance().log("Blocking IP: " + client_ip + " for accessing authorized_keys.txt");
            std::thread(blockIP, client_ip).detach();
        } else {
            const char* unknown_command = "Command not found\n";
            send(client_socket, unknown_command, strlen(unknown_command), 0);
        }

        send(client_socket, prompt, strlen(prompt), 0);
    }

    Logger::getInstance().log("Session ended");
}
------------------------------------------------------------------
└─$ cat Shell.hpp
#ifndef SHELL_HPP
#define SHELL_HPP

#include "BaseShell.hpp"

class Shell : public BaseShell { // Inheriting from BaseShell
public:
    // Override the run method to implement shell behavior
    void run(int client_socket) override; 
};

#endif // SHELL_HPP

-------------------------------------
└─$ cat main.cpp      
#include "Server.hpp"
#include "Logger.hpp"

int main() {
    Logger::getInstance().log("Starting SSH honeypot...");
    Server server(2222);  // Listen on port 2222
    server.start();
    return 0;
}
    -----------------------------------------------------
    └─$ cat log_to_db.cpp      
    
#include <sqlite3.h>
#include <iostream>
#include <fstream>
#include <string>

void createTable(sqlite3* db) {
    const char* create_messages_table_sql = R"(
        CREATE TABLE IF NOT EXISTS Messages (
            message_id INTEGER PRIMARY KEY AUTOINCREMENT,
            message TEXT UNIQUE NOT NULL
        );
    )";
    char* errmsg;
    int rc = sqlite3_exec(db, create_messages_table_sql, 0, 0, &errmsg);
    if (rc != SQLITE_OK) {
        std::cerr << "Failed to create Messages table: " << errmsg << std::endl;
        sqlite3_free(errmsg);
        sqlite3_close(db);
        exit(1);
    }

    const char* create_logs_table_sql = R"(
        CREATE TABLE IF NOT EXISTS Logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT NOT NULL,
            message_id INTEGER,
            FOREIGN KEY (message_id) REFERENCES Messages (message_id)
        );
    )";
    rc = sqlite3_exec(db, create_logs_table_sql, 0, 0, &errmsg);
    if (rc != SQLITE_OK) {
        std::cerr << "Failed to create Logs table: " << errmsg << std::endl;
        sqlite3_free(errmsg);
        sqlite3_close(db);
        exit(1);
    }
}


void insertLog(sqlite3* db, const std::string& timestamp, const std::string& message) {
    sqlite3_stmt* stmt;

    // Insert message into Messages table
    const char* insert_message_sql = R"(
        INSERT OR IGNORE INTO Messages (message) VALUES (?);
    )";
    int rc = sqlite3_prepare_v2(db, insert_message_sql, -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        std::cerr << "Failed to prepare insert message statement: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_close(db);
        exit(1);
    }

    sqlite3_bind_text(stmt, 1, message.c_str(), -1, SQLITE_STATIC);
    rc = sqlite3_step(stmt);
    sqlite3_finalize(stmt); // Finalize after execution

    // Get message_id for the inserted message
    const char* select_message_id_sql = R"(
        SELECT message_id FROM Messages WHERE message = ?;
    )";
    rc = sqlite3_prepare_v2(db, select_message_id_sql, -1, &stmt, 0);
    sqlite3_bind_text(stmt, 1, message.c_str(), -1, SQLITE_STATIC);

    if (rc != SQLITE_OK) {
        std::cerr << "Failed to prepare select message ID statement: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_close(db);
        exit(1);
    }

    int message_id = -1; // Initialize to an invalid value
    if (sqlite3_step(stmt) == SQLITE_ROW) {
        message_id = sqlite3_column_int(stmt, 0);
    }
    sqlite3_finalize(stmt); // Finalize after execution

    // Insert log entry into Logs table
    if (message_id != -1) {
        const char* insert_log_sql = R"(
            INSERT INTO Logs (timestamp, message_id) VALUES (?, ?);
        )";
        rc = sqlite3_prepare_v2(db, insert_log_sql, -1, &stmt, 0);
        if (rc != SQLITE_OK) {
            std::cerr << "Failed to prepare insert log statement: " << sqlite3_errmsg(db) << std::endl;
            sqlite3_close(db);
            exit(1);
        }

        sqlite3_bind_text(stmt, 1, timestamp.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_int(stmt, 2, message_id);

        rc = sqlite3_step(stmt);
        if (rc != SQLITE_DONE) {
            std::cerr << "Failed to insert log data: " << sqlite3_errmsg(db) << std::endl;
        }

        sqlite3_finalize(stmt); // Finalize after execution
    }
}

#include <sqlite3.h>

// Initialize database
void initializeDatabase(sqlite3* db) {
    char* err_msg = 0;

    // Create the Messages table
    const char* create_messages_table_sql =
        "CREATE TABLE IF NOT EXISTS Messages ("
        "message_id INTEGER PRIMARY KEY AUTOINCREMENT,"
        "message TEXT NOT NULL);";

    // Execute SQL to create Messages table
    if (sqlite3_exec(db, create_messages_table_sql, 0, 0, &err_msg) != SQLITE_OK) {
        fprintf(stderr, "SQL error: %s\n", err_msg);
        sqlite3_free(err_msg);
    }

    // Create the Logs table with a foreign key reference to Messages
    const char* create_logs_table_sql =
        "CREATE TABLE IF NOT EXISTS Logs ("
        "id INTEGER PRIMARY KEY AUTOINCREMENT,"
        "timestamp TEXT NOT NULL,"
        "message_id INTEGER,"
        "FOREIGN KEY (message_id) REFERENCES Messages (message_id));";

    if (sqlite3_exec(db, create_logs_table_sql, 0, 0, &err_msg) != SQLITE_OK) {
        fprintf(stderr, "SQL error: %s\n", err_msg);
        sqlite3_free(err_msg);
    }
}



int main() {
    const std::string db_path = "honeypot_logs.db"; // Relative path

    sqlite3* db;
    int rc = sqlite3_open(db_path.c_str(), &db);
    if (rc) {
        std::cerr << "Can't open database: " << sqlite3_errmsg(db) << std::endl;
        return 1;
    } else {
        std::cout << "Opened database successfully!" << std::endl;
    }

    createTable(db);

    std::ifstream log_file("ssh_honeypot.log");
    if (!log_file) {
        std::cerr << "Unable to open log file!" << std::endl;
        sqlite3_close(db);
        return 1;
    }

    std::string line;
    while (std::getline(log_file, line)) {
        // Extract timestamp and message from the log line
        // Assuming log format is: [timestamp] message
        size_t pos = line.find("] ");
        if (pos != std::string::npos) {
            std::string timestamp = line.substr(1, pos - 1);
            std::string message = line.substr(pos + 2);
            insertLog(db, timestamp, message);
        }
    }

    log_file.close();
    sqlite3_close(db);
    std::cout << "Data inserted and database closed successfully!" << std::endl;
    return 0;
}




  ---------------------------------------
  cat BaseShell.hpp
  #ifndef BASESHELL_HPP
#define BASESHELL_HPP

class BaseShell {
public:
    // Pure virtual function to run the shell
    virtual void run(int client_socket) = 0; 
    // Virtual destructor to allow proper cleanup of derived classes
    virtual ~BaseShell() = default; 
};

#endif // BASESHELL_HPP
-------------------------------------------------------------------
